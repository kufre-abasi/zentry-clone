{
  "resolvedId": "/Users/kufre-abasibassey/Documents/Projects/WEB2/zentry clone/untitled folder/zentry/node_modules/gsap/ScrambleTextPlugin.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*!\n * ScrambleTextPlugin 3.13.0\n * https://gsap.com\n *\n * @license Copyright 2008-2025, GreenSock. All rights reserved.\n * Subject to the terms at https://gsap.com/standard-license\n * @author: Jack Doyle, jack@greensock.com\n*/\n\n/* eslint-disable */\nimport { emojiSafeSplit, getText } from \"./utils/strings.js\";\n\nvar CharSet = /*#__PURE__*/function () {\n  function CharSet(chars) {\n    this.chars = emojiSafeSplit(chars);\n    this.sets = [];\n    this.length = 50;\n\n    for (var i = 0; i < 20; i++) {\n      this.sets[i] = _scrambleText(80, this.chars); //we create 20 strings that are 80 characters long, randomly chosen and pack them into an array. We then randomly choose the scrambled text from this array in order to greatly improve efficiency compared to creating new randomized text from scratch each and every time it's needed. This is a simple lookup whereas the other technique requires looping through as many times as there are characters needed, and calling Math.random() each time through the loop, building the string, etc.\n    }\n  }\n\n  var _proto = CharSet.prototype;\n\n  _proto.grow = function grow(newLength) {\n    //if we encounter a tween that has more than 80 characters, we'll need to add to the character sets accordingly. Once it's cached, it'll only need to grow again if we exceed that new length. Again, this is an efficiency tactic.\n    for (var i = 0; i < 20; i++) {\n      this.sets[i] += _scrambleText(newLength - this.length, this.chars);\n    }\n\n    this.length = newLength;\n  };\n\n  return CharSet;\n}();\n\nvar gsap,\n    _coreInitted,\n    _getGSAP = function _getGSAP() {\n  return gsap || typeof window !== \"undefined\" && (gsap = window.gsap) && gsap.registerPlugin && gsap;\n},\n    _bonusValidated = 1,\n    //<name>ScrambleTextPlugin</name>\n_spacesExp = /\\s+/g,\n    _scrambleText = function _scrambleText(length, chars) {\n  var l = chars.length,\n      s = \"\";\n\n  while (--length > -1) {\n    s += chars[~~(Math.random() * l)];\n  }\n\n  return s;\n},\n    _upper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n    _lower = _upper.toLowerCase(),\n    _charsLookup = {\n  upperCase: new CharSet(_upper),\n  lowerCase: new CharSet(_lower),\n  upperAndLowerCase: new CharSet(_upper + _lower)\n},\n    _initCore = function _initCore() {\n  _coreInitted = gsap = _getGSAP();\n};\n\nexport var ScrambleTextPlugin = {\n  version: \"3.13.0\",\n  name: \"scrambleText\",\n  register: function register(core, Plugin, propTween) {\n    gsap = core;\n\n    _initCore();\n  },\n  init: function init(target, value, tween, index, targets) {\n    _coreInitted || _initCore();\n    this.prop = \"innerHTML\" in target ? \"innerHTML\" : \"textContent\" in target ? \"textContent\" : 0; // SVG text in IE doesn't have innerHTML, but it does have textContent.\n\n    if (!this.prop) {\n      return;\n    }\n\n    this.target = target;\n\n    if (typeof value !== \"object\") {\n      value = {\n        text: value\n      };\n    }\n\n    var text = value.text || value.value || \"\",\n        trim = value.trim !== false,\n        data = this,\n        delim,\n        maxLength,\n        charset,\n        splitByChars;\n    data.delimiter = delim = value.delimiter || \"\";\n    data.original = emojiSafeSplit(getText(target).replace(_spacesExp, \" \").split(\"&nbsp;\").join(\"\"), delim, trim);\n\n    if (text === \"{original}\" || text === true || text == null) {\n      text = data.original.join(delim);\n    }\n\n    data.text = emojiSafeSplit((text || \"\").replace(_spacesExp, \" \"), delim, trim);\n    data.hasClass = !!(value.newClass || value.oldClass);\n    data.newClass = value.newClass;\n    data.oldClass = value.oldClass;\n    splitByChars = delim === \"\";\n    data.textHasEmoji = splitByChars && !!data.text.emoji;\n    data.charsHaveEmoji = !!value.chars && !!emojiSafeSplit(value.chars).emoji;\n    data.length = splitByChars ? data.original.length : data.original.join(delim).length;\n    data.lengthDif = (splitByChars ? data.text.length : data.text.join(delim).length) - data.length;\n    data.fillChar = value.fillChar || value.chars && ~value.chars.indexOf(\" \") ? \"&nbsp;\" : \"\";\n    data.charSet = charset = _charsLookup[value.chars || \"upperCase\"] || new CharSet(value.chars);\n    data.speed = 0.05 / (value.speed || 1);\n    data.prevScrambleTime = 0;\n    data.setIndex = Math.random() * 20 | 0;\n    maxLength = data.length + Math.max(data.lengthDif, 0);\n\n    if (maxLength > charset.length) {\n      charset.grow(maxLength);\n    }\n\n    data.chars = charset.sets[data.setIndex];\n    data.revealDelay = value.revealDelay || 0;\n    data.tweenLength = value.tweenLength !== false;\n    data.tween = tween;\n    data.rightToLeft = !!value.rightToLeft;\n\n    data._props.push(\"scrambleText\", \"text\");\n\n    return _bonusValidated;\n  },\n  render: function render(ratio, data) {\n    var target = data.target,\n        prop = data.prop,\n        text = data.text,\n        delimiter = data.delimiter,\n        tween = data.tween,\n        prevScrambleTime = data.prevScrambleTime,\n        revealDelay = data.revealDelay,\n        setIndex = data.setIndex,\n        chars = data.chars,\n        charSet = data.charSet,\n        length = data.length,\n        textHasEmoji = data.textHasEmoji,\n        charsHaveEmoji = data.charsHaveEmoji,\n        lengthDif = data.lengthDif,\n        tweenLength = data.tweenLength,\n        oldClass = data.oldClass,\n        newClass = data.newClass,\n        rightToLeft = data.rightToLeft,\n        fillChar = data.fillChar,\n        speed = data.speed,\n        original = data.original,\n        hasClass = data.hasClass,\n        l = text.length,\n        time = tween._time,\n        timeDif = time - prevScrambleTime,\n        i,\n        i2,\n        startText,\n        endText,\n        applyNew,\n        applyOld,\n        str,\n        startClass,\n        endClass,\n        position,\n        r;\n\n    if (revealDelay) {\n      if (tween._from) {\n        time = tween._dur - time; //invert the time for from() tweens\n      }\n\n      ratio = time === 0 ? 0 : time < revealDelay ? 0.000001 : time === tween._dur ? 1 : tween._ease((time - revealDelay) / (tween._dur - revealDelay));\n    }\n\n    if (ratio < 0) {\n      ratio = 0;\n    } else if (ratio > 1) {\n      ratio = 1;\n    }\n\n    if (rightToLeft) {\n      ratio = 1 - ratio;\n    }\n\n    i = ~~(ratio * l + 0.5);\n\n    if (ratio) {\n      if (timeDif > speed || timeDif < -speed) {\n        data.setIndex = setIndex = (setIndex + (Math.random() * 19 | 0)) % 20;\n        data.chars = charSet.sets[setIndex];\n        data.prevScrambleTime += timeDif;\n      }\n\n      endText = chars;\n    } else {\n      endText = original.join(delimiter);\n    }\n\n    r = tween._from ? ratio : 1 - ratio;\n    position = length + (tweenLength ? tween._from ? r * r * r : 1 - r * r * r : 1) * lengthDif;\n\n    if (rightToLeft) {\n      if (ratio === 1 && (tween._from || tween.data === \"isFromStart\")) {\n        //special case for from() tweens\n        startText = \"\";\n        endText = original.join(delimiter);\n      } else {\n        str = text.slice(i).join(delimiter);\n\n        if (charsHaveEmoji) {\n          startText = emojiSafeSplit(endText).slice(0, position - (textHasEmoji ? emojiSafeSplit(str) : str).length + 0.5 | 0).join(\"\");\n        } else {\n          startText = endText.substr(0, position - (textHasEmoji ? emojiSafeSplit(str) : str).length + 0.5 | 0);\n        }\n\n        endText = str;\n      }\n    } else {\n      startText = text.slice(0, i).join(delimiter);\n      i2 = (textHasEmoji ? emojiSafeSplit(startText) : startText).length;\n\n      if (charsHaveEmoji) {\n        endText = emojiSafeSplit(endText).slice(i2, position + 0.5 | 0).join(\"\");\n      } else {\n        endText = endText.substr(i2, position - i2 + 0.5 | 0);\n      }\n    }\n\n    if (hasClass) {\n      startClass = rightToLeft ? oldClass : newClass;\n      endClass = rightToLeft ? newClass : oldClass;\n      applyNew = startClass && i !== 0;\n      applyOld = endClass && i !== l;\n      str = (applyNew ? \"<span class='\" + startClass + \"'>\" : \"\") + startText + (applyNew ? \"</span>\" : \"\") + (applyOld ? \"<span class='\" + endClass + \"'>\" : \"\") + delimiter + endText + (applyOld ? \"</span>\" : \"\");\n    } else {\n      str = startText + delimiter + endText;\n    }\n\n    target[prop] = fillChar === \"&nbsp;\" && ~str.indexOf(\"  \") ? str.split(\"  \").join(\"&nbsp;&nbsp;\") : str;\n  }\n};\nScrambleTextPlugin.emojiSafeSplit = emojiSafeSplit;\nScrambleTextPlugin.getText = getText;\n_getGSAP() && gsap.registerPlugin(ScrambleTextPlugin);\nexport { ScrambleTextPlugin as default };",
      "start": 1746838930428,
      "end": 1746838931429,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1746838931429,
      "end": 1746838931429,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1746838931429,
      "end": 1746838931429,
      "order": "pre"
    },
    {
      "name": "unplugin-vue-i18n",
      "start": 1746838931429,
      "end": 1746838931429,
      "order": "pre"
    },
    {
      "name": "nuxtjs:i18n-macros-transform",
      "start": 1746838931429,
      "end": 1746838931429,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1746838931429,
      "end": 1746838931429,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1746838931429,
      "end": 1746838931429,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1746838931429,
      "end": 1746838931429,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1746838931429,
      "end": 1746838931429,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1746838931429,
      "end": 1746838931429,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1746838931429,
      "end": 1746838931429,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1746838931429,
      "end": 1746838931429,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1746838931429,
      "end": 1746838931429,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1746838931429,
      "end": 1746838931429,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1746838931429,
      "end": 1746838931429,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1746838931429,
      "end": 1746838931433,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1746838931433,
      "end": 1746838931434,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1746838931434,
      "end": 1746838931434,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1746838931434,
      "end": 1746838931434,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1746838931434,
      "end": 1746838931434,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1746838931434,
      "end": 1746838931434,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1746838931434,
      "end": 1746838931434,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1746838931434,
      "end": 1746838931434,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1746838931434,
      "end": 1746838931436,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1746838931436,
      "end": 1746838931436,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1746838931436,
      "end": 1746838931436,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1746838931436,
      "end": 1746838931436,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-resource",
      "start": 1746838931436,
      "end": 1746838931436,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-meta-deprecation",
      "start": 1746838931436,
      "end": 1746838931436,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1746838931436,
      "end": 1746838931436,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1746838931436,
      "end": 1746838931436,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1746838931436,
      "end": 1746838931436,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1746838931436,
      "end": 1746838931436,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1746838931437,
      "end": 1746838931437,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1746838931437,
      "end": 1746838931437,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1746838931437,
      "end": 1746838931437,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1746838931437,
      "end": 1746838931437,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1746838931437,
      "end": 1746838931437,
      "order": "normal"
    }
  ]
}
