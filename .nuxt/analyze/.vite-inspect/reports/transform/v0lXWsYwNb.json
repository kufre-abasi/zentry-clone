{
  "resolvedId": "/Users/kufre-abasibassey/Documents/Projects/WEB2/zentry clone/untitled folder/zentry/node_modules/gsap/PhysicsPropsPlugin.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*!\n * PhysicsPropsPlugin 3.13.0\n * https://gsap.com\n *\n * @license Copyright 2008-2025, GreenSock. All rights reserved.\n * Subject to the terms at https://gsap.com/standard-license\n * @author: Jack Doyle, jack@greensock.com\n*/\n\n/* eslint-disable */\nvar gsap,\n    _coreInitted,\n    _getUnit,\n    _getStyleSaver,\n    _reverting,\n    _getGSAP = function _getGSAP() {\n  return gsap || typeof window !== \"undefined\" && (gsap = window.gsap) && gsap.registerPlugin && gsap;\n},\n    _round = function _round(value) {\n  return Math.round(value * 10000) / 10000;\n},\n    _bonusValidated = 1,\n    //<name>PhysicsPropsPlugin</name>\n_initCore = function _initCore(core) {\n  gsap = core || _getGSAP();\n\n  if (!_coreInitted) {\n    _getUnit = gsap.utils.getUnit;\n    _getStyleSaver = gsap.core.getStyleSaver;\n\n    _reverting = gsap.core.reverting || function () {};\n\n    _coreInitted = 1;\n  }\n};\n\nvar PhysicsProp = function PhysicsProp(target, p, velocity, acceleration, friction, stepsPerTimeUnit) {\n  var cache = target._gsap,\n      curVal = cache.get(target, p);\n  this.p = p;\n  this.set = cache.set(target, p); //setter\n\n  this.s = this.val = parseFloat(curVal);\n  this.u = _getUnit(curVal) || 0;\n  this.vel = velocity || 0;\n  this.v = this.vel / stepsPerTimeUnit;\n\n  if (acceleration || acceleration === 0) {\n    this.acc = acceleration;\n    this.a = this.acc / (stepsPerTimeUnit * stepsPerTimeUnit);\n  } else {\n    this.acc = this.a = 0;\n  }\n\n  this.fr = 1 - (friction || 0);\n};\n\nexport var PhysicsPropsPlugin = {\n  version: \"3.13.0\",\n  name: \"physicsProps\",\n  register: _initCore,\n  init: function init(target, value, tween) {\n    _coreInitted || _initCore();\n    var data = this,\n        p;\n    data.styles = _getStyleSaver && _getStyleSaver(target);\n    data.target = target;\n    data.tween = tween;\n    data.step = 0;\n    data.sps = 30; //steps per second\n\n    data.vProps = [];\n\n    for (p in value) {\n      var _value$p = value[p],\n          velocity = _value$p.velocity,\n          acceleration = _value$p.acceleration,\n          friction = _value$p.friction;\n\n      if (velocity || acceleration) {\n        data.vProps.push(new PhysicsProp(target, p, velocity, acceleration, friction, data.sps));\n\n        data._props.push(p);\n\n        _getStyleSaver && data.styles.save(p);\n        friction && (data.hasFr = 1);\n      }\n    }\n  },\n  render: function render(ratio, data) {\n    var vProps = data.vProps,\n        tween = data.tween,\n        target = data.target,\n        step = data.step,\n        hasFr = data.hasFr,\n        sps = data.sps,\n        i = vProps.length,\n        time = tween._from ? tween._dur - tween._time : tween._time,\n        curProp,\n        steps,\n        remainder,\n        j,\n        tt;\n\n    if (tween._time || !_reverting()) {\n      if (hasFr) {\n        time *= sps;\n        steps = (time | 0) - step;\n        /*\n        Note: rounding errors build up if we walk the calculations backward which we used to do like this to maximize performance:\n        while (i--) {\n        \tcurProp = vProps[i];\n        \tj = -steps;\n        \twhile (j--) {\n        \t\tcurProp.val -= curProp.v;\n        \t\tcurProp.v /= curProp.fr;\n        \t\tcurProp.v -= curProp.a;\n        \t}\n        \tcurProp.set(target, curProp.p, _round(curProp.val + (curProp.v * remainder * curProp.fr)) + curProp.u);\n        }\n        but now for the sake of accuracy (to ensure rewinding always goes back to EXACTLY the same spot), we force the calculations to go forward every time. So if the tween is going backward, we just start from the beginning and iterate. This is only necessary with friction.\n         */\n\n        if (steps < 0) {\n          while (i--) {\n            curProp = vProps[i];\n            curProp.v = curProp.vel / sps;\n            curProp.val = curProp.s;\n          }\n\n          i = vProps.length;\n          data.step = step = 0;\n          steps = time | 0;\n        }\n\n        remainder = time % 1;\n\n        while (i--) {\n          curProp = vProps[i];\n          j = steps;\n\n          while (j--) {\n            curProp.v += curProp.a;\n            curProp.v *= curProp.fr;\n            curProp.val += curProp.v;\n          }\n\n          curProp.set(target, curProp.p, _round(curProp.val + curProp.v * remainder * curProp.fr) + curProp.u);\n        }\n\n        data.step += steps;\n      } else {\n        tt = time * time * 0.5;\n\n        while (i--) {\n          curProp = vProps[i];\n          curProp.set(target, curProp.p, _round(curProp.s + curProp.vel * time + curProp.acc * tt) + curProp.u);\n        }\n      }\n    } else {\n      data.styles.revert();\n    }\n  },\n  kill: function kill(property) {\n    var vProps = this.vProps,\n        i = vProps.length;\n\n    while (i--) {\n      vProps[i].p === property && vProps.splice(i, 1);\n    }\n  }\n};\n_getGSAP() && gsap.registerPlugin(PhysicsPropsPlugin);\nexport { PhysicsPropsPlugin as default };",
      "start": 1746891115502,
      "end": 1746891116046,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1746891116046,
      "end": 1746891116046,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1746891116046,
      "end": 1746891116046,
      "order": "pre"
    },
    {
      "name": "unplugin-vue-i18n",
      "start": 1746891116046,
      "end": 1746891116046,
      "order": "pre"
    },
    {
      "name": "nuxtjs:i18n-macros-transform",
      "start": 1746891116046,
      "end": 1746891116046,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1746891116046,
      "end": 1746891116046,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1746891116046,
      "end": 1746891116046,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1746891116046,
      "end": 1746891116046,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1746891116046,
      "end": 1746891116046,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1746891116046,
      "end": 1746891116046,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1746891116046,
      "end": 1746891116046,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1746891116046,
      "end": 1746891116046,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1746891116046,
      "end": 1746891116046,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1746891116046,
      "end": 1746891116046,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1746891116046,
      "end": 1746891116046,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1746891116046,
      "end": 1746891116046,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1746891116046,
      "end": 1746891116046,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1746891116046,
      "end": 1746891116046,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1746891116046,
      "end": 1746891116046,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1746891116046,
      "end": 1746891116046,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1746891116046,
      "end": 1746891116046,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1746891116046,
      "end": 1746891116046,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1746891116046,
      "end": 1746891116046,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1746891116046,
      "end": 1746891116047,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1746891116047,
      "end": 1746891116047,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1746891116047,
      "end": 1746891116047,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1746891116047,
      "end": 1746891116047,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-resource",
      "start": 1746891116047,
      "end": 1746891116048,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-meta-deprecation",
      "start": 1746891116048,
      "end": 1746891116048,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1746891116048,
      "end": 1746891116048,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1746891116048,
      "end": 1746891116048,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1746891116048,
      "end": 1746891116048,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1746891116048,
      "end": 1746891116048,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1746891116048,
      "end": 1746891116048,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1746891116048,
      "end": 1746891116048,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1746891116048,
      "end": 1746891116048,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1746891116048,
      "end": 1746891116048,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1746891116048,
      "end": 1746891116048,
      "order": "normal"
    }
  ]
}
