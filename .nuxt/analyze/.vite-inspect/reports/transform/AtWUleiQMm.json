{
  "resolvedId": "/Users/kufre-abasibassey/Documents/Projects/WEB2/zentry clone/untitled folder/zentry/node_modules/gsap/DrawSVGPlugin.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*!\n * DrawSVGPlugin 3.13.0\n * https://gsap.com\n *\n * @license Copyright 2008-2025, GreenSock. All rights reserved.\n * Subject to the terms at https://gsap.com/standard-license\n * @author: Jack Doyle, jack@greensock.com\n*/\n\n/* eslint-disable */\nvar gsap,\n    _toArray,\n    _doc,\n    _win,\n    _isEdge,\n    _coreInitted,\n    _warned,\n    _getStyleSaver,\n    _reverting,\n    _windowExists = function _windowExists() {\n  return typeof window !== \"undefined\";\n},\n    _getGSAP = function _getGSAP() {\n  return gsap || _windowExists() && (gsap = window.gsap) && gsap.registerPlugin && gsap;\n},\n    _numExp = /[-+=\\.]*\\d+[\\.e\\-\\+]*\\d*[e\\-\\+]*\\d*/gi,\n    //finds any numbers, including ones that start with += or -=, negative numbers, and ones in scientific notation like 1e-8.\n_types = {\n  rect: [\"width\", \"height\"],\n  circle: [\"r\", \"r\"],\n  ellipse: [\"rx\", \"ry\"],\n  line: [\"x2\", \"y2\"]\n},\n    _round = function _round(value) {\n  return Math.round(value * 10000) / 10000;\n},\n    _parseNum = function _parseNum(value) {\n  return parseFloat(value) || 0;\n},\n    _parseSingleVal = function _parseSingleVal(value, length) {\n  var num = _parseNum(value);\n\n  return ~value.indexOf(\"%\") ? num / 100 * length : num;\n},\n    _getAttributeAsNumber = function _getAttributeAsNumber(target, attr) {\n  return _parseNum(target.getAttribute(attr));\n},\n    _sqrt = Math.sqrt,\n    _getDistance = function _getDistance(x1, y1, x2, y2, scaleX, scaleY) {\n  return _sqrt(Math.pow((_parseNum(x2) - _parseNum(x1)) * scaleX, 2) + Math.pow((_parseNum(y2) - _parseNum(y1)) * scaleY, 2));\n},\n    _warn = function _warn(message) {\n  return console.warn(message);\n},\n    _hasNonScalingStroke = function _hasNonScalingStroke(target) {\n  return target.getAttribute(\"vector-effect\") === \"non-scaling-stroke\";\n},\n    _bonusValidated = 1,\n    //<name>DrawSVGPlugin</name>\n//accepts values like \"100%\" or \"20% 80%\" or \"20 50\" and parses it into an absolute start and end position on the line/stroke based on its length. Returns an an array with the start and end values, like [0, 243]\n_parse = function _parse(value, length, defaultStart) {\n  var i = value.indexOf(\" \"),\n      s,\n      e;\n\n  if (i < 0) {\n    s = defaultStart !== undefined ? defaultStart + \"\" : value;\n    e = value;\n  } else {\n    s = value.substr(0, i);\n    e = value.substr(i + 1);\n  }\n\n  s = _parseSingleVal(s, length);\n  e = _parseSingleVal(e, length);\n  return s > e ? [e, s] : [s, e];\n},\n    _getLength = function _getLength(target) {\n  target = _toArray(target)[0];\n\n  if (!target) {\n    return 0;\n  }\n\n  var type = target.tagName.toLowerCase(),\n      style = target.style,\n      scaleX = 1,\n      scaleY = 1,\n      length,\n      bbox,\n      points,\n      prevPoint,\n      i,\n      rx,\n      ry;\n\n  if (_hasNonScalingStroke(target)) {\n    //non-scaling-stroke basically scales the shape and then strokes it at the screen-level (after transforms), thus we need to adjust the length accordingly.\n    scaleY = target.getScreenCTM();\n    scaleX = _sqrt(scaleY.a * scaleY.a + scaleY.b * scaleY.b);\n    scaleY = _sqrt(scaleY.d * scaleY.d + scaleY.c * scaleY.c);\n  }\n\n  try {\n    //IE bug: calling <path>.getTotalLength() locks the repaint area of the stroke to whatever its current dimensions are on that frame/tick. To work around that, we must call getBBox() to force IE to recalculate things.\n    bbox = target.getBBox(); //solely for fixing bug in IE - we don't actually use the bbox.\n  } catch (e) {\n    //firefox has a bug that throws an error if the element isn't visible.\n    _warn(\"Some browsers won't measure invisible elements (like display:none or masks inside defs).\");\n  }\n\n  var _ref = bbox || {\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0\n  },\n      x = _ref.x,\n      y = _ref.y,\n      width = _ref.width,\n      height = _ref.height;\n\n  if ((!bbox || !width && !height) && _types[type]) {\n    //if the element isn't visible, try to discern width/height using its attributes.\n    width = _getAttributeAsNumber(target, _types[type][0]);\n    height = _getAttributeAsNumber(target, _types[type][1]);\n\n    if (type !== \"rect\" && type !== \"line\") {\n      //double the radius for circles and ellipses\n      width *= 2;\n      height *= 2;\n    }\n\n    if (type === \"line\") {\n      x = _getAttributeAsNumber(target, \"x1\");\n      y = _getAttributeAsNumber(target, \"y1\");\n      width = Math.abs(width - x);\n      height = Math.abs(height - y);\n    }\n  }\n\n  if (type === \"path\") {\n    prevPoint = style.strokeDasharray;\n    style.strokeDasharray = \"none\";\n    length = target.getTotalLength() || 0;\n    _round(scaleX) !== _round(scaleY) && !_warned && (_warned = 1) && _warn(\"Warning: <path> length cannot be measured when vector-effect is non-scaling-stroke and the element isn't proportionally scaled.\");\n    length *= (scaleX + scaleY) / 2;\n    style.strokeDasharray = prevPoint;\n  } else if (type === \"rect\") {\n    length = width * 2 * scaleX + height * 2 * scaleY;\n  } else if (type === \"line\") {\n    length = _getDistance(x, y, x + width, y + height, scaleX, scaleY);\n  } else if (type === \"polyline\" || type === \"polygon\") {\n    points = target.getAttribute(\"points\").match(_numExp) || [];\n    type === \"polygon\" && points.push(points[0], points[1]);\n    length = 0;\n\n    for (i = 2; i < points.length; i += 2) {\n      length += _getDistance(points[i - 2], points[i - 1], points[i], points[i + 1], scaleX, scaleY) || 0;\n    }\n  } else if (type === \"circle\" || type === \"ellipse\") {\n    rx = width / 2 * scaleX;\n    ry = height / 2 * scaleY;\n    length = Math.PI * (3 * (rx + ry) - _sqrt((3 * rx + ry) * (rx + 3 * ry)));\n  }\n\n  return length || 0;\n},\n    _getPosition = function _getPosition(target, length) {\n  target = _toArray(target)[0];\n\n  if (!target) {\n    return [0, 0];\n  }\n\n  length || (length = _getLength(target) + 1);\n\n  var cs = _win.getComputedStyle(target),\n      dash = cs.strokeDasharray || \"\",\n      offset = _parseNum(cs.strokeDashoffset),\n      i = dash.indexOf(\",\");\n\n  i < 0 && (i = dash.indexOf(\" \"));\n  dash = i < 0 ? length : _parseNum(dash.substr(0, i));\n  dash > length && (dash = length);\n  return [-offset || 0, dash - offset || 0];\n},\n    _initCore = function _initCore() {\n  if (_windowExists()) {\n    _doc = document;\n    _win = window;\n    _coreInitted = gsap = _getGSAP();\n    _toArray = gsap.utils.toArray;\n    _getStyleSaver = gsap.core.getStyleSaver;\n\n    _reverting = gsap.core.reverting || function () {};\n\n    _isEdge = ((_win.navigator || {}).userAgent || \"\").indexOf(\"Edge\") !== -1; //Microsoft Edge has a bug that causes it not to redraw the path correctly if the stroke-linecap is anything other than \"butt\" (like \"round\") and it doesn't match the stroke-linejoin. A way to trigger it is to change the stroke-miterlimit, so we'll only do that if/when we have to (to maximize performance)\n  }\n};\n\nexport var DrawSVGPlugin = {\n  version: \"3.13.0\",\n  name: \"drawSVG\",\n  register: function register(core) {\n    gsap = core;\n\n    _initCore();\n  },\n  init: function init(target, value, tween, index, targets) {\n    if (!target.getBBox) {\n      return false;\n    }\n\n    _coreInitted || _initCore();\n\n    var length = _getLength(target),\n        start,\n        end,\n        cs;\n\n    this.styles = _getStyleSaver && _getStyleSaver(target, \"strokeDashoffset,strokeDasharray,strokeMiterlimit\");\n    this.tween = tween;\n    this._style = target.style;\n    this._target = target;\n\n    if (value + \"\" === \"true\") {\n      value = \"0 100%\";\n    } else if (!value) {\n      value = \"0 0\";\n    } else if ((value + \"\").indexOf(\" \") === -1) {\n      value = \"0 \" + value;\n    }\n\n    start = _getPosition(target, length);\n    end = _parse(value, length, start[0]);\n    this._length = _round(length);\n    this._dash = _round(start[1] - start[0]); //some browsers render artifacts if dash is 0, so we use a very small number in that case.\n\n    this._offset = _round(-start[0]);\n    this._dashPT = this.add(this, \"_dash\", this._dash, _round(end[1] - end[0]), 0, 0, 0, 0, 0, 1);\n    this._offsetPT = this.add(this, \"_offset\", this._offset, _round(-end[0]), 0, 0, 0, 0, 0, 1);\n\n    if (_isEdge) {\n      //to work around a bug in Microsoft Edge, animate the stroke-miterlimit by 0.0001 just to trigger the repaint (unnecessary if it's \"round\" and stroke-linejoin is also \"round\"). Imperceptible, relatively high-performance, and effective. Another option was to set the \"d\" <path> attribute to its current value on every tick, but that seems like it'd be much less performant.\n      cs = _win.getComputedStyle(target);\n\n      if (cs.strokeLinecap !== cs.strokeLinejoin) {\n        end = _parseNum(cs.strokeMiterlimit);\n        this.add(target.style, \"strokeMiterlimit\", end, end + 0.01);\n      }\n    }\n\n    this._live = _hasNonScalingStroke(target) || ~(value + \"\").indexOf(\"live\");\n    this._nowrap = ~(value + \"\").indexOf(\"nowrap\");\n\n    this._props.push(\"drawSVG\");\n\n    return _bonusValidated;\n  },\n  render: function render(ratio, data) {\n    if (data.tween._time || !_reverting()) {\n      var pt = data._pt,\n          style = data._style,\n          length,\n          lengthRatio,\n          dash,\n          offset;\n\n      if (pt) {\n        //when the element has vector-effect=\"non-scaling-stroke\" and the SVG is resized (like on a window resize), it actually changes the length of the stroke! So we must sense that and make the proper adjustments.\n        if (data._live) {\n          length = _getLength(data._target);\n\n          if (length !== data._length) {\n            lengthRatio = length / data._length;\n            data._length = length;\n\n            if (data._offsetPT) {\n              data._offsetPT.s *= lengthRatio;\n              data._offsetPT.c *= lengthRatio;\n            }\n\n            if (data._dashPT) {\n              data._dashPT.s *= lengthRatio;\n              data._dashPT.c *= lengthRatio;\n            } else {\n              data._dash *= lengthRatio;\n            }\n          }\n        }\n\n        while (pt) {\n          pt.r(ratio, pt.d);\n          pt = pt._next;\n        }\n\n        dash = data._dash || ratio && ratio !== 1 && 0.0001 || 0; // only let it be zero if it's at the start or end of the tween.\n\n        length = data._length - dash + 0.1;\n        offset = data._offset;\n        dash && offset && dash + Math.abs(offset % data._length) > data._length - 0.05 && (offset += offset < 0 ? 0.005 : -0.005) && (length += 0.005);\n        style.strokeDashoffset = dash ? offset : offset + 0.001;\n        style.strokeDasharray = length < 0.1 ? \"none\" : dash ? dash + \"px,\" + (data._nowrap ? 999999 : length) + \"px\" : \"0px, 999999px\";\n      }\n    } else {\n      data.styles.revert();\n    }\n  },\n  getLength: _getLength,\n  getPosition: _getPosition\n};\n_getGSAP() && gsap.registerPlugin(DrawSVGPlugin);\nexport { DrawSVGPlugin as default };",
      "start": 1746891114259,
      "end": 1746891115661,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1746891115661,
      "end": 1746891115661,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1746891115661,
      "end": 1746891115661,
      "order": "pre"
    },
    {
      "name": "unplugin-vue-i18n",
      "start": 1746891115662,
      "end": 1746891115662,
      "order": "pre"
    },
    {
      "name": "nuxtjs:i18n-macros-transform",
      "start": 1746891115662,
      "end": 1746891115662,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1746891115662,
      "end": 1746891115662,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1746891115662,
      "end": 1746891115662,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1746891115662,
      "end": 1746891115662,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1746891115662,
      "end": 1746891115662,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1746891115662,
      "end": 1746891115662,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1746891115662,
      "end": 1746891115662,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1746891115662,
      "end": 1746891115662,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1746891115662,
      "end": 1746891115662,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1746891115662,
      "end": 1746891115662,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1746891115662,
      "end": 1746891115662,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1746891115662,
      "end": 1746891115662,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1746891115662,
      "end": 1746891115662,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1746891115662,
      "end": 1746891115662,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1746891115662,
      "end": 1746891115662,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1746891115662,
      "end": 1746891115662,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1746891115662,
      "end": 1746891115662,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1746891115662,
      "end": 1746891115662,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1746891115662,
      "end": 1746891115662,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1746891115662,
      "end": 1746891115693,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1746891115693,
      "end": 1746891115693,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1746891115693,
      "end": 1746891115693,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1746891115693,
      "end": 1746891115693,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-resource",
      "start": 1746891115693,
      "end": 1746891115693,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-meta-deprecation",
      "start": 1746891115693,
      "end": 1746891115693,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1746891115693,
      "end": 1746891115694,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1746891115694,
      "end": 1746891115694,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1746891115694,
      "end": 1746891115694,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1746891115694,
      "end": 1746891115694,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1746891115694,
      "end": 1746891115694,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1746891115694,
      "end": 1746891115694,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1746891115694,
      "end": 1746891115694,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1746891115694,
      "end": 1746891115694,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1746891115694,
      "end": 1746891115694,
      "order": "normal"
    }
  ]
}
