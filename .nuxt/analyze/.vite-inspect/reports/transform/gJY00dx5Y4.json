{
  "resolvedId": "/Users/kufre-abasibassey/Documents/Projects/WEB2/zentry clone/untitled folder/zentry/node_modules/gsap/MotionPathHelper.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*!\n * MotionPathHelper 3.13.0\n * https://gsap.com\n *\n * @license Copyright 2008-2025, GreenSock. All rights reserved.\n * Subject to the terms at https://gsap.com/standard-license\n * @author: Jack Doyle, jack@greensock.com\n*/\n\n/* eslint-disable */\nimport PathEditor from \"./utils/PathEditor.js\";\n\nvar gsap,\n    _win,\n    _doc,\n    _docEl,\n    _body,\n    MotionPathPlugin,\n    _arrayToRawPath,\n    _rawPathToString,\n    _context,\n    _bonusValidated = 1,\n    //<name>MotionPathHelper</name>\n_selectorExp = /(^[#\\.][a-z]|[a-y][a-z])/i,\n    _isString = function _isString(value) {\n  return typeof value === \"string\";\n},\n    _createElement = function _createElement(type, ns) {\n  var e = _doc.createElementNS ? _doc.createElementNS((ns || \"http://www.w3.org/1999/xhtml\").replace(/^https/, \"http\"), type) : _doc.createElement(type); //some servers swap in https for http in the namespace which can break things, making \"style\" inaccessible.\n\n  return e.style ? e : _doc.createElement(type); //some environments won't allow access to the element's style when created with a namespace in which case we default to the standard createElement() to work around the issue. Also note that when GSAP is embedded directly inside an SVG file, createElement() won't allow access to the style object in Firefox (see https://gsap.com/forums/topic/20215-problem-using-tweenmax-in-standalone-self-containing-svg-file-err-cannot-set-property-csstext-of-undefined/).\n},\n    _getPositionOnPage = function _getPositionOnPage(target) {\n  var bounds = target.getBoundingClientRect(),\n      windowOffsetY = _docEl.clientTop - (_win.pageYOffset || _docEl.scrollTop || _body.scrollTop || 0),\n      windowOffsetX = _docEl.clientLeft - (_win.pageXOffset || _docEl.scrollLeft || _body.scrollLeft || 0);\n  return {\n    left: bounds.left + windowOffsetX,\n    top: bounds.top + windowOffsetY,\n    right: bounds.right + windowOffsetX,\n    bottom: bounds.bottom + windowOffsetY\n  };\n},\n    _getInitialPath = function _getInitialPath(x, y) {\n  var coordinates = [0, 31, 8, 58, 24, 75, 40, 90, 69, 100, 100, 100],\n      i;\n\n  for (i = 0; i < coordinates.length; i += 2) {\n    coordinates[i] += x;\n    coordinates[i + 1] += y;\n  }\n\n  return \"M\" + x + \",\" + y + \"C\" + coordinates.join(\",\");\n},\n    _getGlobalTime = function _getGlobalTime(animation) {\n  var time = animation.totalTime();\n\n  while (animation) {\n    time = animation.startTime() + time / (animation.timeScale() || 1);\n    animation = animation.parent;\n  }\n\n  return time;\n},\n    _copyElement,\n    _initCopyToClipboard = function _initCopyToClipboard() {\n  _copyElement = _createElement(\"textarea\");\n  _copyElement.style.display = \"none\";\n\n  _body.appendChild(_copyElement);\n},\n    _parsePath = function _parsePath(path, target, vars) {\n  return _isString(path) && _selectorExp.test(path) ? _doc.querySelector(path) : Array.isArray(path) ? _rawPathToString(_arrayToRawPath([{\n    x: gsap.getProperty(target, \"x\"),\n    y: gsap.getProperty(target, \"y\")\n  }].concat(path), vars)) : _isString(path) || path && (path.tagName + \"\").toLowerCase() === \"path\" ? path : 0;\n},\n    _addCopyToClipboard = function _addCopyToClipboard(target, getter, onComplete) {\n  target.addEventListener('click', function (e) {\n    if (e.target._gsHelper) {\n      var c = getter(e.target);\n      _copyElement.value = c;\n\n      if (c && _copyElement.select) {\n        console.log(c);\n        _copyElement.style.display = \"block\";\n\n        _copyElement.select();\n\n        try {\n          _doc.execCommand('copy');\n\n          _copyElement.blur();\n\n          onComplete && onComplete(target);\n        } catch (err) {\n          console.warn(\"Copy didn't work; this browser doesn't permit that.\");\n        }\n\n        _copyElement.style.display = \"none\";\n      }\n    }\n  });\n},\n    _identityMatrixObject = {\n  matrix: {\n    a: 1,\n    b: 0,\n    c: 0,\n    d: 1,\n    e: 0,\n    f: 0\n  }\n},\n    _getConsolidatedMatrix = function _getConsolidatedMatrix(target) {\n  return (target.transform.baseVal.consolidate() || _identityMatrixObject).matrix;\n},\n    _findMotionPathTween = function _findMotionPathTween(target) {\n  var tweens = gsap.getTweensOf(target),\n      i = 0;\n\n  for (; i < tweens.length; i++) {\n    if (tweens[i].vars.motionPath) {\n      return tweens[i];\n    } else if (tweens[i].timeline) {\n      tweens.push.apply(tweens, tweens[i].timeline.getChildren());\n    }\n  }\n},\n    _initCore = function _initCore(core, required) {\n  var message = \"Please gsap.registerPlugin(MotionPathPlugin)\";\n  _win = window;\n  gsap = gsap || core || _win.gsap || console.warn(message);\n  gsap && PathEditor.register(gsap);\n  _doc = document;\n  _body = _doc.body;\n  _docEl = _doc.documentElement;\n\n  if (gsap) {\n    MotionPathPlugin = gsap.plugins.motionPath;\n    MotionPathHelper.PathEditor = PathEditor;\n\n    _context = gsap.core.context || function () {};\n  }\n\n  if (!MotionPathPlugin) {\n    required === true && console.warn(message);\n  } else {\n    _initCopyToClipboard();\n\n    _arrayToRawPath = MotionPathPlugin.arrayToRawPath;\n    _rawPathToString = MotionPathPlugin.rawPathToString;\n  }\n};\n\nexport var MotionPathHelper = /*#__PURE__*/function () {\n  function MotionPathHelper(targetOrTween, vars) {\n    var _this = this;\n\n    if (vars === void 0) {\n      vars = {};\n    }\n\n    if (!MotionPathPlugin) {\n      _initCore(vars.gsap, 1);\n    }\n\n    var copyButton = _createElement(\"div\"),\n        self = this,\n        offset = {\n      x: 0,\n      y: 0\n    },\n        target,\n        path,\n        isSVG,\n        startX,\n        startY,\n        position,\n        svg,\n        animation,\n        svgNamespace,\n        temp,\n        matrix,\n        refreshPath,\n        animationToScrub,\n        createdSVG;\n\n    if (targetOrTween instanceof gsap.core.Tween) {\n      animation = targetOrTween;\n      target = animation.targets()[0];\n    } else {\n      target = gsap.utils.toArray(targetOrTween)[0];\n      animation = _findMotionPathTween(target);\n    }\n\n    path = _parsePath(vars.path, target, vars);\n    this.offset = offset;\n    position = _getPositionOnPage(target);\n    startX = parseFloat(gsap.getProperty(target, \"x\", \"px\"));\n    startY = parseFloat(gsap.getProperty(target, \"y\", \"px\"));\n    isSVG = target.getCTM && target.tagName.toLowerCase() !== \"svg\";\n\n    if (animation && !path) {\n      path = _parsePath(animation.vars.motionPath.path || animation.vars.motionPath, target, animation.vars.motionPath);\n    }\n\n    copyButton.setAttribute(\"class\", \"copy-motion-path\");\n    copyButton.style.cssText = \"border-radius:8px; background-color:rgba(85, 85, 85, 0.7); color:#fff; cursor:pointer; padding:6px 12px; font-family:Signika Negative, Arial, sans-serif; position:fixed; left:50%; transform:translate(-50%, 0); font-size:19px; bottom:10px\";\n    copyButton.innerText = \"COPY MOTION PATH\";\n    copyButton._gsHelper = self;\n\n    (gsap.utils.toArray(vars.container)[0] || _body).appendChild(copyButton);\n\n    _addCopyToClipboard(copyButton, function () {\n      return self.getString();\n    }, function () {\n      return gsap.fromTo(copyButton, {\n        backgroundColor: \"white\"\n      }, {\n        duration: 0.5,\n        backgroundColor: \"rgba(85, 85, 85, 0.6)\"\n      });\n    });\n\n    svg = path && path.ownerSVGElement;\n\n    if (!svg) {\n      svgNamespace = isSVG && target.ownerSVGElement && target.ownerSVGElement.getAttribute(\"xmlns\") || \"http://www.w3.org/2000/svg\";\n\n      if (isSVG) {\n        svg = target.ownerSVGElement;\n        temp = target.getBBox();\n        matrix = _getConsolidatedMatrix(target);\n        startX = matrix.e;\n        startY = matrix.f;\n        offset.x = temp.x;\n        offset.y = temp.y;\n      } else {\n        svg = _createElement(\"svg\", svgNamespace);\n        createdSVG = true;\n\n        _body.appendChild(svg);\n\n        svg.setAttribute(\"viewBox\", \"0 0 100 100\");\n        svg.setAttribute(\"class\", \"motion-path-helper\");\n        svg.style.cssText = \"overflow:visible; background-color: transparent; position:absolute; z-index:5000; width:100px; height:100px; top:\" + (position.top - startY) + \"px; left:\" + (position.left - startX) + \"px;\";\n      }\n\n      temp = _isString(path) && !_selectorExp.test(path) ? path : _getInitialPath(startX, startY);\n      path = _createElement(\"path\", svgNamespace);\n      path.setAttribute(\"d\", temp);\n      path.setAttribute(\"vector-effect\", \"non-scaling-stroke\");\n      path.style.cssText = \"fill:transparent; stroke-width:\" + (vars.pathWidth || 3) + \"; stroke:\" + (vars.pathColor || \"#555\") + \"; opacity:\" + (vars.pathOpacity || 0.6);\n      svg.appendChild(path);\n    } else {\n      vars.pathColor && gsap.set(path, {\n        stroke: vars.pathColor\n      });\n      vars.pathWidth && gsap.set(path, {\n        strokeWidth: vars.pathWidth\n      });\n      vars.pathOpacity && gsap.set(path, {\n        opacity: vars.pathOpacity\n      });\n    }\n\n    if (offset.x || offset.y) {\n      gsap.set(path, {\n        x: offset.x,\n        y: offset.y\n      });\n    }\n\n    if (!(\"selected\" in vars)) {\n      vars.selected = true;\n    }\n\n    if (!(\"anchorSnap\" in vars)) {\n      vars.anchorSnap = function (p) {\n        if (p.x * p.x + p.y * p.y < 16) {\n          p.x = p.y = 0;\n        }\n      };\n    }\n\n    animationToScrub = animation && animation.parent && animation.parent.data === \"nested\" ? animation.parent.parent : animation;\n\n    vars.onPress = function () {\n      animationToScrub.pause(0);\n    };\n\n    refreshPath = function refreshPath() {\n      //let m = _getConsolidatedMatrix(path);\n      //animation.vars.motionPath.offsetX = m.e - offset.x;\n      //animation.vars.motionPath.offsetY = m.f - offset.y;\n      animation.invalidate();\n      animationToScrub.restart();\n    };\n\n    vars.onRelease = vars.onDeleteAnchor = refreshPath;\n    this.editor = PathEditor.create(path, vars);\n\n    if (vars.center) {\n      gsap.set(target, {\n        transformOrigin: \"50% 50%\",\n        xPercent: -50,\n        yPercent: -50\n      });\n    }\n\n    if (animation) {\n      if (animation.vars.motionPath.path) {\n        animation.vars.motionPath.path = path;\n      } else {\n        animation.vars.motionPath = {\n          path: path\n        };\n      }\n\n      if (animationToScrub.parent !== gsap.globalTimeline) {\n        gsap.globalTimeline.add(animationToScrub, _getGlobalTime(animationToScrub) - animationToScrub.delay());\n      }\n\n      animationToScrub.repeat(-1).repeatDelay(1);\n    } else {\n      animation = animationToScrub = gsap.to(target, {\n        motionPath: {\n          path: path,\n          start: vars.start || 0,\n          end: \"end\" in vars ? vars.end : 1,\n          autoRotate: \"autoRotate\" in vars ? vars.autoRotate : false,\n          align: path,\n          alignOrigin: vars.alignOrigin\n        },\n        duration: vars.duration || 5,\n        ease: vars.ease || \"power1.inOut\",\n        repeat: -1,\n        repeatDelay: 1,\n        paused: !vars.path\n      });\n    }\n\n    this.animation = animation;\n\n    _context(this);\n\n    this.kill = this.revert = function () {\n      _this.editor.kill();\n\n      copyButton.parentNode && copyButton.parentNode.removeChild(copyButton);\n      createdSVG && svg.parentNode && svg.parentNode.removeChild(svg);\n      animationToScrub && animationToScrub.revert();\n    };\n  }\n\n  var _proto = MotionPathHelper.prototype;\n\n  _proto.getString = function getString() {\n    return this.editor.getString(true, -this.offset.x, -this.offset.y);\n  };\n\n  return MotionPathHelper;\n}();\nMotionPathHelper.register = _initCore;\n\nMotionPathHelper.create = function (target, vars) {\n  return new MotionPathHelper(target, vars);\n};\n\nMotionPathHelper.editPath = function (path, vars) {\n  return PathEditor.create(path, vars);\n};\n\nMotionPathHelper.version = \"3.13.0\";\nexport { MotionPathHelper as default };",
      "start": 1746913689385,
      "end": 1746913690356,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1746913690356,
      "end": 1746913690356,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1746913690356,
      "end": 1746913690357,
      "order": "pre"
    },
    {
      "name": "unplugin-vue-i18n",
      "start": 1746913690357,
      "end": 1746913690357,
      "order": "pre"
    },
    {
      "name": "nuxtjs:i18n-macros-transform",
      "start": 1746913690357,
      "end": 1746913690357,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1746913690357,
      "end": 1746913690357,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1746913690357,
      "end": 1746913690357,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1746913690357,
      "end": 1746913690357,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1746913690357,
      "end": 1746913690357,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1746913690357,
      "end": 1746913690357,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1746913690357,
      "end": 1746913690357,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1746913690357,
      "end": 1746913690357,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1746913690357,
      "end": 1746913690357,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1746913690357,
      "end": 1746913690357,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1746913690357,
      "end": 1746913690358,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1746913690358,
      "end": 1746913690358,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1746913690358,
      "end": 1746913690358,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1746913690358,
      "end": 1746913690358,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1746913690358,
      "end": 1746913690358,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1746913690358,
      "end": 1746913690358,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1746913690358,
      "end": 1746913690358,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1746913690358,
      "end": 1746913690358,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1746913690358,
      "end": 1746913690358,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1746913690358,
      "end": 1746913690359,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1746913690359,
      "end": 1746913690360,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1746913690360,
      "end": 1746913690360,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1746913690360,
      "end": 1746913690360,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-resource",
      "start": 1746913690360,
      "end": 1746913690360,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-meta-deprecation",
      "start": 1746913690360,
      "end": 1746913690360,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1746913690360,
      "end": 1746913690360,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1746913690360,
      "end": 1746913690360,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1746913690360,
      "end": 1746913690360,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1746913690360,
      "end": 1746913690360,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1746913690360,
      "end": 1746913690360,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1746913690360,
      "end": 1746913690360,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1746913690360,
      "end": 1746913690360,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1746913690360,
      "end": 1746913690360,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1746913690360,
      "end": 1746913690360,
      "order": "normal"
    }
  ]
}
